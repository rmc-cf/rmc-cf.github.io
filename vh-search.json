[{"title":"每日名句","url":"/article/dongman-mingju-3","content":"每日名句 - 最恶劣的敌人 通常都是自己Der schlimmste Feind, dem du begegnen kannst, wirst du immer dir selber sein."},{"title":"每日名句","url":"/article/dongman-mingju-2","content":"每日名句 - 所有失败都只是通往成功的过程。Every failure is a step to success."},{"title":"每日名句","url":"/article/dongman-mingju-1","content":"每日名句 - 正因陷入困境，才更要保持平静。Aequam memento rebus in arduis servare mentem."},{"title":"开始系统架构师之路","url":"/article/start-system-architect","content":"开始系统架构师之路 - 从 大四毕业的我 到 现在的无所事事，再到现在微薄的收入，我下定决心一定要有所成就。于是，这次我欣然决然报名了高级软考系统架构师，准备开始了我的系统架构师备考之路。我以软件设计师为基础开始学习，着重掌握嵌入式开发、大数据方向以及论文的写作，在高级软考方面，我深知没有项目积累的人往往很难通过，我决心沉淀几个星期，先着手朝着理论知识方向学习，项目积累方面尽量能够打动到考官。于是，我写下了这篇文章作为我博客的开头曲，俗话说得好，有志者事竟成，只要能够拿得起，就能够放得下一切。加油！"},{"title":"使用梯子时如何解决git脚本问题","url":"/article/vpn-git-number","content":"使用梯子时如何解决git脚本问题 - 梯子使用git 无法使用问题 解决方案 亲测有效…git config —global http.proxy 127.0.0.1:git config —global https.proxy 127.0.0.1:"},{"title":"🐳 Docker 常用命令速查手册","url":"/article/docker-help-code","content":"🐳 Docker 常用命令速查手册 - 一、容器生命周期管理1.1 容器启停# 运行新容器docker run [选项] 镜像名 [命令]   # -d 后台运行   # -p 宿主机端口:容器端口   # -v 宿主机目录:容器目录   # --name 指定容器名称   # -e 设置环境变量   # --rm 退出后自动删除   # -it 进入交互模式# 示例：启动Nginx并映射端口docker run -d -p 80:80 --name my-nginx nginx# 容器生命周期控制docker start 容器ID/名称      # 启动已停止的容器docker stop 容器ID/名称       # 优雅停止容器docker restart 容器ID/名称    # 重启容器docker kill 容器ID/名称       # 强制停止容器docker pause 容器ID/名称      # 冻结容器进程docker unpause 容器ID/名称    # 恢复容器运行docker rm 容器ID/名称         # 删除已停止容器docker rm -f 容器ID/名称      # 强制删除运行中容器二、容器运维操作2.1 状态查看docker ps                 # 列出运行中容器docker ps -a              # 查看所有容器（含已停止）docker logs 容器ID/名称    # 查看容器日志docker logs -f 容器ID/名称 # 实时追踪日志docker stats              # 实时资源监控docker top 容器ID/名称     # 查看容器进程2.2 交互操作docker exec -it 容器ID/名称 bash  # 进入容器执行命令docker attach 容器ID/名称        # 附加到主进程三、镜像管理3.1 镜像操作docker images             # 列出本地镜像docker pull 镜像名:标签    # 拉取远程镜像docker push 镜像名:标签    # 推送镜像到仓库docker rmi 镜像ID/名称     # 删除镜像docker build -t 镜像名 .   # 构建镜像（需Dockerfile）docker history 镜像名      # 查看镜像构建历史3.2 镜像传输# 导出镜像为tar包docker save 镜像名 > image.tar# 从tar包加载镜像docker load  container.tar# 导入容器快照为镜像docker import container.tar 镜像名:标签四、网络管理docker network ls         # 列出所有网络docker network create 网络名  # 创建自定义网络docker network inspect 网络名 # 查看网络详情docker network connect 网络名 容器名 # 连接容器到网络docker network disconnect 网络名 容器名 # 断开网络连接五、数据持久化docker volume ls          # 列出数据卷docker volume create 卷名  # 创建数据卷docker volume inspect 卷名 # 查看卷详情docker volume rm 卷名      # 删除数据卷六、Docker Composedocker-compose up -d      # 后台启动服务docker-compose down       # 停止并删除资源docker-compose ps         # 查看服务状态docker-compose logs -f    # 实时查看日志docker-compose build      # 重新构建镜像docker-compose exec 服务名 bash # 进入服务容器七、系统维护docker system df         # 查看存储使用情况docker system prune      # 清理无用资源（容器/镜像/网络）docker image prune -a    # 删除所有悬空镜像docker container prune   # 删除已停止容器docker version           # 查看版本信息docker info              # 显示系统信息🚀 效率技巧# 批量停止所有运行容器docker stop $(docker ps -q)# 批量删除已退出容器docker rm $(docker ps -aq -f status=exited)# 删除所有悬空镜像docker rmi $(docker images -f \"dangling=true\" -q)# 查看容器IP地址docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 容器名💡 提示：所有命令支持 —help 参数查看详细帮助，例如 docker run —help这次严格遵循了以下 Markdown 规范：使用标准的三反引号代码块语法代码块与文字说明间保留空行层次标题使用规范的 # 分级列表项使用标准符号特殊符号转义处理保持统一的缩进格式"}]